package main

import "html/template"

type generatorTemplateVars struct {
	AppName       string
	Services      []*Service
	CronYamlPath  string
	QueueYamlPath string
	IndexYamlPath string
}

var goGeneratorTemplate = template.Must(template.New("gendeployment.gogenerator").Parse(`package main

import (
	"fmt"
	"os"
	{{range .Services -}}
	{{if .PackageAlias}}
	{{.PackageAlias}} "{{.PackagePath}}"
	{{else}}
	"{{.PackagePath}}"
	{{end}}
	{{end}}
)

func main(){
	var fcron, fqueue, findex *os.File
	var err error
	if fcron, err = os.Create("{{.CronYamlPath}}"); err != nil {
		panic(err)
	}
	defer fcron.Close()
	if fqueue, err = os.Create("{{.QueueYamlPath}}"); err != nil {
		panic(err)
	}
	defer fqueue.Close()
	if findex, err = os.Create("{{.IndexYamlPath}}"); err != nil {
		panic(err)
	}
	defer fqueue.Close()

	fmt.Fprintf(fcron, "cron:\n")
	fmt.Fprintf(fqueue, "queue:\n")
	fmt.Fprintf(findex, "indexes:\n")
	{{range .Services -}}
	func(){
		{{if .PackageAlias}}
		s := {{.PackageAlias}}.NewService()
		{{else}}
		s := {{.Package}}.NewService()
		{{end}}
		s.GenCronYAML(fcron)
		s.GenQueueYAML(fqueue)
		s.GenIndexYAML(findex)
	}()
	{{end}}
}
`))

type appTemplateVars struct {
	PackageName string
	Services    []*Service
}

var goAppTemplate = template.Must(template.New("gendeployment.goapp").Parse(`package {{.PackageName}}

import (
	"github.com/yssk22/go/gae/service"
	{{range .Services -}}
	{{if .PackageAlias -}}
	{{.PackageAlias}} "{{.PackagePath}}"
	{{else -}}
	"{{.PackagePath}}"
	{{end -}}
	{{end}}
)

func init(){
	service.NewDispatcher(
	{{range .Services -}}
	{{if .PackageAlias -}}
	{{.PackageAlias}}.NewService(),
	{{else -}}
	{{.Package}}.NewService(),
	{{end -}}
	{{end }}
	).Run()
}
`))

type appYamlTemplateVars struct {
	ServiceName string
	GoVersion   string
}

var appYamlTemplate = template.Must(template.New("gendeployment.goapp").Parse(`# generated by gendeployment
service: {{.ServiceName}}
runtime: go
api_version: {{.GoVersion}}

inbound_services:

handlers:
- url: /_ah/remote_api
  script: _go_app
  secure: always
- url: /static/
  static_dir: static/
  secure: always
- url: /.*
  script: _go_app
  secure: always
`))
