package generator

import (
	"bytes"
	"fmt"
	"io"
	"os/exec"
	"strings"

	"github.com/sqs/goreturns/returns"
	"github.com/yssk22/go/x/xerrors"
	"golang.org/x/tools/imports"
)

type Formatter interface {
	Format(string) (string, error)
}

// FormatterFunc is to define Formatter interface from a func
type FormatterFunc func(string) (string, error)

// Format implements Formatter#format
func (f FormatterFunc) Format(s string) (string, error) {
	return f(s)
}

// GoFormatter is a formatter for go.
var GoFormatter = FormatterFunc(func(src string) (string, error) {
	formatted, err := imports.Process("", []byte(src), &imports.Options{
		Fragment:  true,
		Comments:  true,
		TabIndent: true,
		TabWidth:  8,
	})
	if err != nil {
		return "", &InvalidSourceError{
			Source: src,
			err:    xerrors.Wrap(err, "failed to run goimports.Process"),
		}
	}
	formatted, err = returns.Process("", "", formatted, &returns.Options{
		Fragment: true,
	})
	if err != nil {
		return "", &InvalidSourceError{
			Source: src,
			err:    xerrors.Wrap(err, "failed to run goreturns.Process"),
		}
	}
	return strings.Join([]string{
		"// Code generated by github.com/yssk22/go/generator DO NOT EDIT.",
		"//",
		string(formatted),
	}, "\n"), nil
})

// JavaScriptFormatter is a formatter for js
var JavaScriptFormatter = FormatterFunc(func(src string) (string, error) {
	var out bytes.Buffer
	var errOut bytes.Buffer
	c := exec.Command("prettier", "--stdin", "--parser", "flow")
	r, w := io.Pipe()
	c.Stdin = r
	c.Stdout = &out
	c.Stderr = &errOut
	if err := c.Start(); err != nil {
		w.Close()
		return "", xerrors.Wrap(err, "cannot launch prettier")
	}
	if _, err := w.Write([]byte(
		[]byte(strings.Join([]string{
			"// Code generated by github.com/yssk22/go/generator DO NOT EDIT.",
			"// eslint-edisable",
			src,
		}, "\n")),
	)); err != nil {
		w.Close()
		return "", err
	}
	w.Close()
	c.Wait()
	if !c.ProcessState.Success() {
		return "", fmt.Errorf("failed to run prettier: %s", errOut.String())

	}
	return out.String(), nil
})
