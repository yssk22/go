// Code generated by github.com/yssk22/go/generator DO NOT EDIT.
//
package session

import (
	"context"

	"cloud.google.com/go/datastore"
	ds "github.com/yssk22/go/gcp/datastore"
	"github.com/yssk22/go/x/xerrors"
	"github.com/yssk22/go/x/xtime"
	"google.golang.org/api/iterator"
)

func (s *Session) NewKey(ctx context.Context) *datastore.Key {
	key := ds.NewKey("Session", s.ID)
	key.Namespace = ""
	return key
}

type SessionReplacer interface {
	Replace(*Session, *Session) *Session
}

type SessionReplacerFunc func(*Session, *Session) *Session

func (f SessionReplacerFunc) Replace(old *Session, new *Session) *Session {
	return f(old, new)
}

type SessionKindClient struct {
	client *ds.Client
}

func NewSessionKindClient(client *ds.Client) *SessionKindClient {
	return &SessionKindClient{
		client: client,
	}
}

func (d *SessionKindClient) Get(ctx context.Context, key interface{}) (*datastore.Key, *Session, error) {
	keys, ents, err := d.GetMulti(ctx, []interface{}{key})
	if err != nil {
		return nil, nil, err
	}
	return keys[0], ents[0], nil
}

func (d *SessionKindClient) MustGet(ctx context.Context, key interface{}) (*datastore.Key, *Session) {
	k, v, e := d.Get(ctx, key)
	xerrors.MustNil(e)
	return k, v
}

func (d *SessionKindClient) GetMulti(ctx context.Context, keys interface{}) ([]*datastore.Key, []*Session, error) {
	var err error
	var dsKeys []*datastore.Key
	var ents []*Session
	if dsKeys, err = ds.NormalizeKeys(keys, "Session", ""); err != nil {
		return nil, nil, xerrors.Wrap(err, "could not normalize keys: %v", keys)
	}
	size := len(dsKeys)
	if size == 0 {
		return nil, nil, nil
	}
	ents = make([]*Session, size, size)
	if err = d.client.GetMulti(ctx, dsKeys, ents); err != nil {
		return nil, nil, err
	}
	return dsKeys, ents, nil
}

func (d *SessionKindClient) MustGetMulti(ctx context.Context, keys interface{}) ([]*datastore.Key, []*Session) {
	k, v, e := d.GetMulti(ctx, keys)
	xerrors.MustNil(e)
	return k, v
}

func (d *SessionKindClient) Put(ctx context.Context, ent *Session) (*datastore.Key, error) {
	keys, err := d.PutMulti(ctx, []*Session{ent})
	if err != nil {
		return nil, err
	}
	return keys[0], nil
}

func (d *SessionKindClient) MustPut(ctx context.Context, ent *Session) *datastore.Key {
	k, e := d.Put(ctx, ent)
	xerrors.MustNil(e)
	return k
}

func (d *SessionKindClient) PutMulti(ctx context.Context, ents []*Session) ([]*datastore.Key, error) {
	var err error
	var size = len(ents)
	var dsKeys []*datastore.Key
	dsKeys = make([]*datastore.Key, size, size)
	if size == 0 {
		return nil, nil
	}
	_, hasBeforeSave := interface{}(ents[0]).(ds.BeforeSave)
	_, hasAfterSave := interface{}(ents[0]).(ds.AfterSave)

	if hasBeforeSave {
		for i := range ents {
			if err := interface{}(ents[i]).(ds.BeforeSave).BeforeSave(ctx); err != nil {
				return nil, err
			}
		}
	}

	for i := range ents {
		dsKeys[i] = ents[i].NewKey(ctx)
		ents[i].Timestamp = xtime.Now()
	}
	if dsKeys, err = d.client.PutMulti(ctx, dsKeys, ents); err != nil {
		return nil, err
	}

	if hasAfterSave {
		for i := range ents {
			if err := interface{}(ents[i]).(ds.AfterSave).AfterSave(ctx); err != nil {
				return nil, err
			}
		}
	}
	return dsKeys, nil
}

func (d *SessionKindClient) MustPutMulti(ctx context.Context, ents []*Session) []*datastore.Key {
	keys, err := d.PutMulti(ctx, ents)
	xerrors.MustNil(err)
	return keys
}

func (d *SessionKindClient) Delete(ctx context.Context, key interface{}) (*datastore.Key, error) {
	keys, err := d.DeleteMulti(ctx, []interface{}{key})
	if err != nil {
		return nil, err
	}
	return keys[0], nil
}

func (d *SessionKindClient) MustDelete(ctx context.Context, key interface{}) *datastore.Key {
	k, e := d.Delete(ctx, key)
	xerrors.MustNil(e)
	return k
}

func (d *SessionKindClient) DeleteMulti(ctx context.Context, keys interface{}) ([]*datastore.Key, error) {
	var err error
	var dsKeys []*datastore.Key
	if dsKeys, err = ds.NormalizeKeys(keys, "Session", ""); err != nil {
		return nil, xerrors.Wrap(err, "could not normalize keys: %v", keys)
	}
	size := len(dsKeys)
	if size == 0 {
		return nil, nil
	}
	if err = d.client.DeleteMulti(ctx, dsKeys); err != nil {
		return nil, xerrors.Wrap(err, "datastore error")
	}
	return dsKeys, nil
}

func (d *SessionKindClient) MustDeleteMulti(ctx context.Context, keys interface{}) []*datastore.Key {
	k, e := d.DeleteMulti(ctx, keys)
	xerrors.MustNil(e)
	return k
}

func (d *SessionKindClient) DeleteMatched(ctx context.Context, q *SessionQuery) ([]*datastore.Key, error) {
	keys, err := d.client.GetAll(ctx, q.query.KeysOnly(), nil)
	if err != nil {
		return nil, err
	}
	_, err = d.DeleteMulti(ctx, keys)
	if err != nil {
		return nil, err
	}
	return keys, nil
}

func (d *SessionKindClient) MustDeleteMatched(ctx context.Context, q *SessionQuery) []*datastore.Key {
	keys, err := d.DeleteMatched(ctx, q)
	xerrors.MustNil(err)
	return keys
}

func (d *SessionKindClient) Replace(ctx context.Context, ent *Session, replacer SessionReplacer) (*datastore.Key, *Session, error) {
	keys, ents, err := d.ReplaceMulti(ctx, []*Session{ent}, replacer)
	if err != nil {
		return nil, ents[0], err
	}
	return keys[0], ents[0], err
}

func (d *SessionKindClient) MustReplace(ctx context.Context, ent *Session, replacer SessionReplacer) (*datastore.Key, *Session) {
	k, v, e := d.Replace(ctx, ent, replacer)
	xerrors.MustNil(e)
	return k, v
}

func (d *SessionKindClient) ReplaceMulti(ctx context.Context, ents []*Session, replacer SessionReplacer) ([]*datastore.Key, []*Session, error) {
	var size = len(ents)
	var dsKeys = make([]*datastore.Key, size, size)
	if size == 0 {
		return dsKeys, ents, nil
	}
	for i := range ents {
		dsKeys[i] = ents[i].NewKey(ctx)
	}
	_, existing, err := d.GetMulti(ctx, dsKeys)
	if err != nil {
		return nil, ents, err
	}
	for i, exist := range existing {
		if exist != nil {
			ents[i] = replacer.Replace(exist, ents[i])
		}
	}
	dsKeys, err = d.PutMulti(ctx, ents)
	return dsKeys, ents, err
}

func (d *SessionKindClient) MustReplaceMulti(ctx context.Context, ents []*Session, replacer SessionReplacer) ([]*datastore.Key, []*Session) {
	k, v, e := d.ReplaceMulti(ctx, ents, replacer)
	xerrors.MustNil(e)
	return k, v
}

type SessionQuery struct {
	query   *ds.Query
	viaKeys bool
}

func NewSessionQuery() *SessionQuery {
	return &SessionQuery{
		query:   ds.NewQuery("Session").Namespace(""),
		viaKeys: false,
	}
}

func (d *SessionQuery) EqID(v string) *SessionQuery {
	d.query = d.query.Eq("ID", v)
	return d
}

func (d *SessionQuery) LtID(v string) *SessionQuery {
	d.query = d.query.Lt("ID", v)
	return d
}

func (d *SessionQuery) LeID(v string) *SessionQuery {
	d.query = d.query.Le("ID", v)
	return d
}

func (d *SessionQuery) GtID(v string) *SessionQuery {
	d.query = d.query.Gt("ID", v)
	return d
}

func (d *SessionQuery) GeID(v string) *SessionQuery {
	d.query = d.query.Ge("ID", v)
	return d
}

func (d *SessionQuery) NeID(v string) *SessionQuery {
	d.query = d.query.Ne("ID", v)
	return d
}

func (d *SessionQuery) AscID() *SessionQuery {
	d.query = d.query.Asc("ID")
	return d
}

func (d *SessionQuery) DescID() *SessionQuery {
	d.query = d.query.Desc("ID")
	return d
}

func (q *SessionQuery) Start(s string) *SessionQuery {
	q.query = q.query.Start(s)
	return q
}

func (q *SessionQuery) End(s string) *SessionQuery {
	q.query = q.query.End(s)
	return q
}

func (q *SessionQuery) Limit(n int) *SessionQuery {
	q.query = q.query.Limit(n)
	return q
}

func (q *SessionQuery) ViaKeys() *SessionQuery {
	q.viaKeys = true
	return q
}

func (d *SessionKindClient) GetAll(ctx context.Context, q *SessionQuery) ([]*datastore.Key, []Session, error) {
	if q.viaKeys {
		keys, err := d.client.GetAll(ctx, q.query.KeysOnly(), nil)
		if err != nil {
			return nil, nil, err
		}
		ents := make([]*Session, len(keys))
		err = d.client.GetMulti(ctx, keys, ents)
		if err != nil {
			return nil, nil, err
		}
		result := make([]Session, 0)
		for _, e := range ents {
			if e != nil {
				result = append(result, *e)
			}
		}
		return keys, result, nil
	} else {
		var ent []Session
		keys, err := d.client.GetAll(ctx, q.query, &ent)
		if err != nil {
			return nil, nil, err
		}
		return keys, ent, nil
	}
}

func (d *SessionKindClient) GetOne(ctx context.Context, q *SessionQuery) (*datastore.Key, *Session, error) {
	keys, ents, err := d.GetAll(ctx, q.Limit(1))
	if err != nil {
		return nil, nil, err
	}
	if len(keys) == 0 {
		return nil, nil, nil
	}
	return keys[0], &(ents[0]), nil
}

func (d *SessionKindClient) MustGetAll(ctx context.Context, q *SessionQuery) ([]*datastore.Key, []Session) {
	keys, ents, err := d.GetAll(ctx, q)
	xerrors.MustNil(err)
	return keys, ents
}

func (d *SessionKindClient) Count(ctx context.Context, q *SessionQuery) (int, error) {
	return d.client.Count(ctx, q.query)
}

func (d *SessionKindClient) MustCount(ctx context.Context, q *SessionQuery) int {
	c, err := d.Count(ctx, q)
	xerrors.MustNil(err)
	return c
}

func (d *SessionKindClient) Run(ctx context.Context, q *SessionQuery) (*SessionIterator, error) {
	iter, err := d.client.Run(ctx, q.query)
	if err != nil {
		return nil, err
	}
	return &SessionIterator{
		ctx:     ctx,
		iter:    iter,
		viaKeys: q.viaKeys,
		client:  d,
	}, err
}

func (d *SessionKindClient) MustRun(ctx context.Context, q *SessionQuery) *SessionIterator {
	iter, err := d.Run(ctx, q)
	xerrors.MustNil(err)
	return iter
}

func (d *SessionKindClient) RunAll(ctx context.Context, q *SessionQuery) ([]datastore.Key, []Session, string, error) {
	iter, err := d.Run(ctx, q)
	if err != nil {
		return nil, nil, "", err
	}
	var keys []datastore.Key
	var ents []Session
	for {
		key, ent, err := iter.Next()
		if err != nil {
			return nil, nil, "", err
		}
		if ent == nil {
			cursor, err := iter.iter.Cursor()
			if err != nil {
				return nil, nil, "", err
			}
			return keys, ents, cursor.String(), nil
		}
		keys = append(keys, *key)
		ents = append(ents, *ent)
	}
}

func (d *SessionKindClient) MustRunAll(ctx context.Context, q *SessionQuery) ([]datastore.Key, []Session, string) {
	keys, ents, next, err := d.RunAll(ctx, q)
	xerrors.MustNil(err)
	return keys, ents, next
}

type SessionIterator struct {
	ctx     context.Context
	iter    *datastore.Iterator
	viaKeys bool
	client  *SessionKindClient
}

func (iter *SessionIterator) Cursor() (datastore.Cursor, error) {
	return iter.iter.Cursor()
}

func (iter *SessionIterator) MustCursor() datastore.Cursor {
	c, err := iter.iter.Cursor()
	xerrors.MustNil(err)
	return c
}

func (iter *SessionIterator) Next() (*datastore.Key, *Session, error) {
	if iter.viaKeys {
		key, err := iter.iter.Next(nil)
		if err != nil {
			if err == iterator.Done {
				return nil, nil, nil
			}
			return nil, nil, err
		}
		_, ent, err := iter.client.Get(iter.ctx, key)
		if err != nil {
			return nil, nil, err
		}
		return key, ent, nil
	}
	var ent Session
	key, err := iter.iter.Next(&ent)
	if err != nil {
		if err == iterator.Done {
			return nil, nil, nil
		}
		return nil, nil, err
	}
	return key, &ent, nil
}

func (iter *SessionIterator) MustNext() (*datastore.Key, *Session) {
	key, ent, err := iter.Next()
	xerrors.MustNil(err)
	return key, ent
}
