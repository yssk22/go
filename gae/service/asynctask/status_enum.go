// Code generated by "enum -type=Status"; DO NOT EDIT

package asynctask

import (
	"encoding/json"
	"fmt"
)

var (
	_StatusValueToString = map[Status]string{
		StatusUnknown: "unknown",
		StatusReady:   "ready",
		StatusRunning: "running",
		StatusSuccess: "success",
		StatusFailure: "failure",
	}
	_StatusStringToValue = map[string]Status{
		"unknown": StatusUnknown,
		"ready":   StatusReady,
		"running": StatusRunning,
		"success": StatusSuccess,
		"failure": StatusFailure,
	}
)

func (i Status) String() string {
	if str, ok := _StatusValueToString[i]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", i)
}

func ParseStatus(s string) (Status, error) {
	if val, ok := _StatusStringToValue[s]; ok {
		return val, nil
	}
	return Status(0), fmt.Errorf("invalid value %q for Status", s)
}

func ParseStatusOr(s string, or Status) Status {
	val, err := ParseStatus(s)
	if err != nil {
		return or
	}
	return val
}

func MustParseStatus(s string) Status {
	val, err := ParseStatus(s)
	if err != nil {
		panic(err)
	}
	return val
}

func (i Status) MarshalJSON() ([]byte, error) {
	var s string
	var ok bool
	if s, ok = _StatusValueToString[i]; !ok {
		s = fmt.Sprintf("Status(%d)", i)
	}
	return json.Marshal(s)
}

func (i *Status) UnmarshalJSON(b []byte) error {
	if b[0] != '"' || b[len(b)-1] != '"' {
		return fmt.Errorf("invalid JSON string")
	}
	newval, err := ParseStatus(string(b[1 : len(b)-1]))
	if err != nil {
		return err
	}
	*i = newval
	return nil
}
