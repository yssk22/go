// Code generated by "enum -type=AuthType"; DO NOT EDIT

package auth

import (
	"encoding/json"
	"fmt"
)

var (
	_AuthTypeValueToString = map[AuthType]string{
		AuthTypeNone:      "none",
		AuthTypeEmail:     "email",
		AuthTypeFacebook:  "facebook",
		AuthTypeTwitter:   "twitter",
		AuthTypeMessenger: "messenger",
		AuthTypeGoogle:    "google",
	}
	_AuthTypeStringToValue = map[string]AuthType{
		"none":      AuthTypeNone,
		"email":     AuthTypeEmail,
		"facebook":  AuthTypeFacebook,
		"twitter":   AuthTypeTwitter,
		"messenger": AuthTypeMessenger,
		"google":    AuthTypeGoogle,
	}
)

func (i AuthType) String() string {
	if str, ok := _AuthTypeValueToString[i]; ok {
		return str
	}
	return fmt.Sprintf("AuthType(%d)", i)
}

func ParseAuthType(s string) (AuthType, error) {
	if val, ok := _AuthTypeStringToValue[s]; ok {
		return val, nil
	}
	return AuthType(0), fmt.Errorf("invalid value %q for AuthType", s)
}

func ParseAuthTypeOr(s string, or AuthType) AuthType {
	val, err := ParseAuthType(s)
	if err != nil {
		return or
	}
	return val
}

func MustParseAuthType(s string) AuthType {
	val, err := ParseAuthType(s)
	if err != nil {
		panic(err)
	}
	return val
}

func (i AuthType) MarshalJSON() ([]byte, error) {
	var s string
	var ok bool
	if s, ok = _AuthTypeValueToString[i]; !ok {
		s = fmt.Sprintf("AuthType(%d)", i)
	}
	return json.Marshal(s)
}

func (i *AuthType) UnmarshalJSON(b []byte) error {
	if b[0] != '"' || b[len(b)-1] != '"' {
		return fmt.Errorf("invalid JSON string")
	}
	newval, err := ParseAuthType(string(b[1 : len(b)-1]))
	if err != nil {
		return err
	}
	*i = newval
	return nil
}
