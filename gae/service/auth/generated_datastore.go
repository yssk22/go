// Code generated by github.com/yssk22/go/generator DO NOT EDIT.
//
package auth

import (
	"context"
	"time"

	"cloud.google.com/go/datastore"
	ds "github.com/yssk22/go/gcp/datastore"
	"github.com/yssk22/go/x/xerrors"
	"github.com/yssk22/go/x/xtime"
	"google.golang.org/api/iterator"
)

func (s *Auth) NewKey(ctx context.Context) *datastore.Key {
	key := ds.NewKey("Auth", s.ID)
	key.Namespace = ""
	return key
}

type AuthReplacer interface {
	Replace(*Auth, *Auth) *Auth
}

type AuthReplacerFunc func(*Auth, *Auth) *Auth

func (f AuthReplacerFunc) Replace(old *Auth, new *Auth) *Auth {
	return f(old, new)
}

type AuthKindClient struct {
	client *ds.Client
}

func NewAuthKindClient(client *ds.Client) *AuthKindClient {
	return &AuthKindClient{
		client: client,
	}
}

func (d *AuthKindClient) Get(ctx context.Context, key interface{}) (*datastore.Key, *Auth, error) {
	keys, ents, err := d.GetMulti(ctx, []interface{}{key})
	if err != nil {
		return nil, nil, err
	}
	return keys[0], ents[0], nil
}

func (d *AuthKindClient) MustGet(ctx context.Context, key interface{}) (*datastore.Key, *Auth) {
	k, v, e := d.Get(ctx, key)
	xerrors.MustNil(e)
	return k, v
}

func (d *AuthKindClient) GetMulti(ctx context.Context, keys interface{}) ([]*datastore.Key, []*Auth, error) {
	var err error
	var dsKeys []*datastore.Key
	var ents []*Auth
	if dsKeys, err = ds.NormalizeKeys(keys, "Auth", ""); err != nil {
		return nil, nil, xerrors.Wrap(err, "could not normalize keys: %v", keys)
	}
	size := len(dsKeys)
	if size == 0 {
		return nil, nil, nil
	}
	ents = make([]*Auth, size, size)
	if err = d.client.GetMulti(ctx, dsKeys, ents); err != nil {
		return nil, nil, err
	}
	return dsKeys, ents, nil
}

func (d *AuthKindClient) MustGetMulti(ctx context.Context, keys interface{}) ([]*datastore.Key, []*Auth) {
	k, v, e := d.GetMulti(ctx, keys)
	xerrors.MustNil(e)
	return k, v
}

func (d *AuthKindClient) Put(ctx context.Context, ent *Auth) (*datastore.Key, error) {
	keys, err := d.PutMulti(ctx, []*Auth{ent})
	if err != nil {
		return nil, err
	}
	return keys[0], nil
}

func (d *AuthKindClient) MustPut(ctx context.Context, ent *Auth) *datastore.Key {
	k, e := d.Put(ctx, ent)
	xerrors.MustNil(e)
	return k
}

func (d *AuthKindClient) PutMulti(ctx context.Context, ents []*Auth) ([]*datastore.Key, error) {
	var err error
	var size = len(ents)
	var dsKeys []*datastore.Key
	dsKeys = make([]*datastore.Key, size, size)
	if size == 0 {
		return nil, nil
	}
	_, hasBeforeSave := interface{}(ents[0]).(ds.BeforeSave)
	_, hasAfterSave := interface{}(ents[0]).(ds.AfterSave)

	if hasBeforeSave {
		for i := range ents {
			if err := interface{}(ents[i]).(ds.BeforeSave).BeforeSave(ctx); err != nil {
				return nil, err
			}
		}
	}

	for i := range ents {
		dsKeys[i] = ents[i].NewKey(ctx)
		ents[i].UpdatedAt = xtime.Now()
	}
	if dsKeys, err = d.client.PutMulti(ctx, dsKeys, ents); err != nil {
		return nil, err
	}

	if hasAfterSave {
		for i := range ents {
			if err := interface{}(ents[i]).(ds.AfterSave).AfterSave(ctx); err != nil {
				return nil, err
			}
		}
	}
	return dsKeys, nil
}

func (d *AuthKindClient) MustPutMulti(ctx context.Context, ents []*Auth) []*datastore.Key {
	keys, err := d.PutMulti(ctx, ents)
	xerrors.MustNil(err)
	return keys
}

func (d *AuthKindClient) Delete(ctx context.Context, key interface{}) (*datastore.Key, error) {
	keys, err := d.DeleteMulti(ctx, []interface{}{key})
	if err != nil {
		return nil, err
	}
	return keys[0], nil
}

func (d *AuthKindClient) MustDelete(ctx context.Context, key interface{}) *datastore.Key {
	k, e := d.Delete(ctx, key)
	xerrors.MustNil(e)
	return k
}

func (d *AuthKindClient) DeleteMulti(ctx context.Context, keys interface{}) ([]*datastore.Key, error) {
	var err error
	var dsKeys []*datastore.Key
	if dsKeys, err = ds.NormalizeKeys(keys, "Auth", ""); err != nil {
		return nil, xerrors.Wrap(err, "could not normalize keys: %v", keys)
	}
	size := len(dsKeys)
	if size == 0 {
		return nil, nil
	}
	if err = d.client.DeleteMulti(ctx, dsKeys); err != nil {
		return nil, xerrors.Wrap(err, "datastore error")
	}
	return dsKeys, nil
}

func (d *AuthKindClient) MustDeleteMulti(ctx context.Context, keys interface{}) []*datastore.Key {
	k, e := d.DeleteMulti(ctx, keys)
	xerrors.MustNil(e)
	return k
}

func (d *AuthKindClient) DeleteMatched(ctx context.Context, q *AuthQuery) ([]*datastore.Key, error) {
	keys, err := d.client.GetAll(ctx, q.query.KeysOnly(), nil)
	if err != nil {
		return nil, err
	}
	_, err = d.DeleteMulti(ctx, keys)
	if err != nil {
		return nil, err
	}
	return keys, nil
}

func (d *AuthKindClient) MustDeleteMatched(ctx context.Context, q *AuthQuery) []*datastore.Key {
	keys, err := d.DeleteMatched(ctx, q)
	xerrors.MustNil(err)
	return keys
}

func (d *AuthKindClient) Replace(ctx context.Context, ent *Auth, replacer AuthReplacer) (*datastore.Key, *Auth, error) {
	keys, ents, err := d.ReplaceMulti(ctx, []*Auth{ent}, replacer)
	if err != nil {
		return nil, ents[0], err
	}
	return keys[0], ents[0], err
}

func (d *AuthKindClient) MustReplace(ctx context.Context, ent *Auth, replacer AuthReplacer) (*datastore.Key, *Auth) {
	k, v, e := d.Replace(ctx, ent, replacer)
	xerrors.MustNil(e)
	return k, v
}

func (d *AuthKindClient) ReplaceMulti(ctx context.Context, ents []*Auth, replacer AuthReplacer) ([]*datastore.Key, []*Auth, error) {
	var size = len(ents)
	var dsKeys = make([]*datastore.Key, size, size)
	if size == 0 {
		return dsKeys, ents, nil
	}
	for i := range ents {
		dsKeys[i] = ents[i].NewKey(ctx)
	}
	_, existing, err := d.GetMulti(ctx, dsKeys)
	if err != nil {
		return nil, ents, err
	}
	for i, exist := range existing {
		if exist != nil {
			ents[i] = replacer.Replace(exist, ents[i])
		}
	}
	dsKeys, err = d.PutMulti(ctx, ents)
	return dsKeys, ents, err
}

func (d *AuthKindClient) MustReplaceMulti(ctx context.Context, ents []*Auth, replacer AuthReplacer) ([]*datastore.Key, []*Auth) {
	k, v, e := d.ReplaceMulti(ctx, ents, replacer)
	xerrors.MustNil(e)
	return k, v
}

type AuthQuery struct {
	query   *ds.Query
	viaKeys bool
}

func NewAuthQuery() *AuthQuery {
	return &AuthQuery{
		query:   ds.NewQuery("Auth").Namespace(""),
		viaKeys: false,
	}
}

func (d *AuthQuery) EqID(v string) *AuthQuery {
	d.query = d.query.Eq("ID", v)
	return d
}

func (d *AuthQuery) EqFacebookID(v string) *AuthQuery {
	d.query = d.query.Eq("FacebookID", v)
	return d
}

func (d *AuthQuery) EqMessengerID(v string) *AuthQuery {
	d.query = d.query.Eq("MessengerID", v)
	return d
}

func (d *AuthQuery) EqTwitterID(v string) *AuthQuery {
	d.query = d.query.Eq("TwitterID", v)
	return d
}

func (d *AuthQuery) EqEmail(v string) *AuthQuery {
	d.query = d.query.Eq("Email", v)
	return d
}

func (d *AuthQuery) EqAuthType(v AuthType) *AuthQuery {
	d.query = d.query.Eq("AuthType", v)
	return d
}

func (d *AuthQuery) EqIsAdmin(v bool) *AuthQuery {
	d.query = d.query.Eq("IsAdmin", v)
	return d
}

func (d *AuthQuery) EqCreatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Eq("CreatedAt", v)
	return d
}

func (d *AuthQuery) EqLastLoginAt(v time.Time) *AuthQuery {
	d.query = d.query.Eq("LastLoginAt", v)
	return d
}

func (d *AuthQuery) EqUpdatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Eq("UpdatedAt", v)
	return d
}

func (d *AuthQuery) LtID(v string) *AuthQuery {
	d.query = d.query.Lt("ID", v)
	return d
}

func (d *AuthQuery) LtFacebookID(v string) *AuthQuery {
	d.query = d.query.Lt("FacebookID", v)
	return d
}

func (d *AuthQuery) LtMessengerID(v string) *AuthQuery {
	d.query = d.query.Lt("MessengerID", v)
	return d
}

func (d *AuthQuery) LtTwitterID(v string) *AuthQuery {
	d.query = d.query.Lt("TwitterID", v)
	return d
}

func (d *AuthQuery) LtEmail(v string) *AuthQuery {
	d.query = d.query.Lt("Email", v)
	return d
}

func (d *AuthQuery) LtAuthType(v AuthType) *AuthQuery {
	d.query = d.query.Lt("AuthType", v)
	return d
}

func (d *AuthQuery) LtIsAdmin(v bool) *AuthQuery {
	d.query = d.query.Lt("IsAdmin", v)
	return d
}

func (d *AuthQuery) LtCreatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Lt("CreatedAt", v)
	return d
}

func (d *AuthQuery) LtLastLoginAt(v time.Time) *AuthQuery {
	d.query = d.query.Lt("LastLoginAt", v)
	return d
}

func (d *AuthQuery) LtUpdatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Lt("UpdatedAt", v)
	return d
}

func (d *AuthQuery) LeID(v string) *AuthQuery {
	d.query = d.query.Le("ID", v)
	return d
}

func (d *AuthQuery) LeFacebookID(v string) *AuthQuery {
	d.query = d.query.Le("FacebookID", v)
	return d
}

func (d *AuthQuery) LeMessengerID(v string) *AuthQuery {
	d.query = d.query.Le("MessengerID", v)
	return d
}

func (d *AuthQuery) LeTwitterID(v string) *AuthQuery {
	d.query = d.query.Le("TwitterID", v)
	return d
}

func (d *AuthQuery) LeEmail(v string) *AuthQuery {
	d.query = d.query.Le("Email", v)
	return d
}

func (d *AuthQuery) LeAuthType(v AuthType) *AuthQuery {
	d.query = d.query.Le("AuthType", v)
	return d
}

func (d *AuthQuery) LeIsAdmin(v bool) *AuthQuery {
	d.query = d.query.Le("IsAdmin", v)
	return d
}

func (d *AuthQuery) LeCreatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Le("CreatedAt", v)
	return d
}

func (d *AuthQuery) LeLastLoginAt(v time.Time) *AuthQuery {
	d.query = d.query.Le("LastLoginAt", v)
	return d
}

func (d *AuthQuery) LeUpdatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Le("UpdatedAt", v)
	return d
}

func (d *AuthQuery) GtID(v string) *AuthQuery {
	d.query = d.query.Gt("ID", v)
	return d
}

func (d *AuthQuery) GtFacebookID(v string) *AuthQuery {
	d.query = d.query.Gt("FacebookID", v)
	return d
}

func (d *AuthQuery) GtMessengerID(v string) *AuthQuery {
	d.query = d.query.Gt("MessengerID", v)
	return d
}

func (d *AuthQuery) GtTwitterID(v string) *AuthQuery {
	d.query = d.query.Gt("TwitterID", v)
	return d
}

func (d *AuthQuery) GtEmail(v string) *AuthQuery {
	d.query = d.query.Gt("Email", v)
	return d
}

func (d *AuthQuery) GtAuthType(v AuthType) *AuthQuery {
	d.query = d.query.Gt("AuthType", v)
	return d
}

func (d *AuthQuery) GtIsAdmin(v bool) *AuthQuery {
	d.query = d.query.Gt("IsAdmin", v)
	return d
}

func (d *AuthQuery) GtCreatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Gt("CreatedAt", v)
	return d
}

func (d *AuthQuery) GtLastLoginAt(v time.Time) *AuthQuery {
	d.query = d.query.Gt("LastLoginAt", v)
	return d
}

func (d *AuthQuery) GtUpdatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Gt("UpdatedAt", v)
	return d
}

func (d *AuthQuery) GeID(v string) *AuthQuery {
	d.query = d.query.Ge("ID", v)
	return d
}

func (d *AuthQuery) GeFacebookID(v string) *AuthQuery {
	d.query = d.query.Ge("FacebookID", v)
	return d
}

func (d *AuthQuery) GeMessengerID(v string) *AuthQuery {
	d.query = d.query.Ge("MessengerID", v)
	return d
}

func (d *AuthQuery) GeTwitterID(v string) *AuthQuery {
	d.query = d.query.Ge("TwitterID", v)
	return d
}

func (d *AuthQuery) GeEmail(v string) *AuthQuery {
	d.query = d.query.Ge("Email", v)
	return d
}

func (d *AuthQuery) GeAuthType(v AuthType) *AuthQuery {
	d.query = d.query.Ge("AuthType", v)
	return d
}

func (d *AuthQuery) GeIsAdmin(v bool) *AuthQuery {
	d.query = d.query.Ge("IsAdmin", v)
	return d
}

func (d *AuthQuery) GeCreatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Ge("CreatedAt", v)
	return d
}

func (d *AuthQuery) GeLastLoginAt(v time.Time) *AuthQuery {
	d.query = d.query.Ge("LastLoginAt", v)
	return d
}

func (d *AuthQuery) GeUpdatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Ge("UpdatedAt", v)
	return d
}

func (d *AuthQuery) NeID(v string) *AuthQuery {
	d.query = d.query.Ne("ID", v)
	return d
}

func (d *AuthQuery) NeFacebookID(v string) *AuthQuery {
	d.query = d.query.Ne("FacebookID", v)
	return d
}

func (d *AuthQuery) NeMessengerID(v string) *AuthQuery {
	d.query = d.query.Ne("MessengerID", v)
	return d
}

func (d *AuthQuery) NeTwitterID(v string) *AuthQuery {
	d.query = d.query.Ne("TwitterID", v)
	return d
}

func (d *AuthQuery) NeEmail(v string) *AuthQuery {
	d.query = d.query.Ne("Email", v)
	return d
}

func (d *AuthQuery) NeAuthType(v AuthType) *AuthQuery {
	d.query = d.query.Ne("AuthType", v)
	return d
}

func (d *AuthQuery) NeIsAdmin(v bool) *AuthQuery {
	d.query = d.query.Ne("IsAdmin", v)
	return d
}

func (d *AuthQuery) NeCreatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Ne("CreatedAt", v)
	return d
}

func (d *AuthQuery) NeLastLoginAt(v time.Time) *AuthQuery {
	d.query = d.query.Ne("LastLoginAt", v)
	return d
}

func (d *AuthQuery) NeUpdatedAt(v time.Time) *AuthQuery {
	d.query = d.query.Ne("UpdatedAt", v)
	return d
}

func (d *AuthQuery) AscID() *AuthQuery {
	d.query = d.query.Asc("ID")
	return d
}

func (d *AuthQuery) AscFacebookID() *AuthQuery {
	d.query = d.query.Asc("FacebookID")
	return d
}

func (d *AuthQuery) AscMessengerID() *AuthQuery {
	d.query = d.query.Asc("MessengerID")
	return d
}

func (d *AuthQuery) AscTwitterID() *AuthQuery {
	d.query = d.query.Asc("TwitterID")
	return d
}

func (d *AuthQuery) AscEmail() *AuthQuery {
	d.query = d.query.Asc("Email")
	return d
}

func (d *AuthQuery) AscAuthType() *AuthQuery {
	d.query = d.query.Asc("AuthType")
	return d
}

func (d *AuthQuery) AscIsAdmin() *AuthQuery {
	d.query = d.query.Asc("IsAdmin")
	return d
}

func (d *AuthQuery) AscCreatedAt() *AuthQuery {
	d.query = d.query.Asc("CreatedAt")
	return d
}

func (d *AuthQuery) AscLastLoginAt() *AuthQuery {
	d.query = d.query.Asc("LastLoginAt")
	return d
}

func (d *AuthQuery) AscUpdatedAt() *AuthQuery {
	d.query = d.query.Asc("UpdatedAt")
	return d
}

func (d *AuthQuery) DescID() *AuthQuery {
	d.query = d.query.Desc("ID")
	return d
}

func (d *AuthQuery) DescFacebookID() *AuthQuery {
	d.query = d.query.Desc("FacebookID")
	return d
}

func (d *AuthQuery) DescMessengerID() *AuthQuery {
	d.query = d.query.Desc("MessengerID")
	return d
}

func (d *AuthQuery) DescTwitterID() *AuthQuery {
	d.query = d.query.Desc("TwitterID")
	return d
}

func (d *AuthQuery) DescEmail() *AuthQuery {
	d.query = d.query.Desc("Email")
	return d
}

func (d *AuthQuery) DescAuthType() *AuthQuery {
	d.query = d.query.Desc("AuthType")
	return d
}

func (d *AuthQuery) DescIsAdmin() *AuthQuery {
	d.query = d.query.Desc("IsAdmin")
	return d
}

func (d *AuthQuery) DescCreatedAt() *AuthQuery {
	d.query = d.query.Desc("CreatedAt")
	return d
}

func (d *AuthQuery) DescLastLoginAt() *AuthQuery {
	d.query = d.query.Desc("LastLoginAt")
	return d
}

func (d *AuthQuery) DescUpdatedAt() *AuthQuery {
	d.query = d.query.Desc("UpdatedAt")
	return d
}

func (q *AuthQuery) Start(s string) *AuthQuery {
	q.query = q.query.Start(s)
	return q
}

func (q *AuthQuery) End(s string) *AuthQuery {
	q.query = q.query.End(s)
	return q
}

func (q *AuthQuery) Limit(n int) *AuthQuery {
	q.query = q.query.Limit(n)
	return q
}

func (q *AuthQuery) ViaKeys() *AuthQuery {
	q.viaKeys = true
	return q
}

func (d *AuthKindClient) GetAll(ctx context.Context, q *AuthQuery) ([]*datastore.Key, []Auth, error) {
	if q.viaKeys {
		keys, err := d.client.GetAll(ctx, q.query.KeysOnly(), nil)
		if err != nil {
			return nil, nil, err
		}
		ents := make([]*Auth, len(keys))
		err = d.client.GetMulti(ctx, keys, ents)
		if err != nil {
			return nil, nil, err
		}
		result := make([]Auth, 0)
		for _, e := range ents {
			if e != nil {
				result = append(result, *e)
			}
		}
		return keys, result, nil
	} else {
		var ent []Auth
		keys, err := d.client.GetAll(ctx, q.query, &ent)
		if err != nil {
			return nil, nil, err
		}
		return keys, ent, nil
	}
}

func (d *AuthKindClient) GetOne(ctx context.Context, q *AuthQuery) (*datastore.Key, *Auth, error) {
	keys, ents, err := d.GetAll(ctx, q.Limit(1))
	if err != nil {
		return nil, nil, err
	}
	if len(keys) == 0 {
		return nil, nil, nil
	}
	return keys[0], &(ents[0]), nil
}

func (d *AuthKindClient) MustGetAll(ctx context.Context, q *AuthQuery) ([]*datastore.Key, []Auth) {
	keys, ents, err := d.GetAll(ctx, q)
	xerrors.MustNil(err)
	return keys, ents
}

func (d *AuthKindClient) Count(ctx context.Context, q *AuthQuery) (int, error) {
	return d.client.Count(ctx, q.query)
}

func (d *AuthKindClient) MustCount(ctx context.Context, q *AuthQuery) int {
	c, err := d.Count(ctx, q)
	xerrors.MustNil(err)
	return c
}

func (d *AuthKindClient) Run(ctx context.Context, q *AuthQuery) (*AuthIterator, error) {
	iter, err := d.client.Run(ctx, q.query)
	if err != nil {
		return nil, err
	}
	return &AuthIterator{
		ctx:     ctx,
		iter:    iter,
		viaKeys: q.viaKeys,
		client:  d,
	}, err
}

func (d *AuthKindClient) MustRun(ctx context.Context, q *AuthQuery) *AuthIterator {
	iter, err := d.Run(ctx, q)
	xerrors.MustNil(err)
	return iter
}

func (d *AuthKindClient) RunAll(ctx context.Context, q *AuthQuery) ([]datastore.Key, []Auth, string, error) {
	iter, err := d.Run(ctx, q)
	if err != nil {
		return nil, nil, "", err
	}
	var keys []datastore.Key
	var ents []Auth
	for {
		key, ent, err := iter.Next()
		if err != nil {
			return nil, nil, "", err
		}
		if ent == nil {
			cursor, err := iter.iter.Cursor()
			if err != nil {
				return nil, nil, "", err
			}
			return keys, ents, cursor.String(), nil
		}
		keys = append(keys, *key)
		ents = append(ents, *ent)
	}
}

func (d *AuthKindClient) MustRunAll(ctx context.Context, q *AuthQuery) ([]datastore.Key, []Auth, string) {
	keys, ents, next, err := d.RunAll(ctx, q)
	xerrors.MustNil(err)
	return keys, ents, next
}

type AuthIterator struct {
	ctx     context.Context
	iter    *datastore.Iterator
	viaKeys bool
	client  *AuthKindClient
}

func (iter *AuthIterator) Cursor() (datastore.Cursor, error) {
	return iter.iter.Cursor()
}

func (iter *AuthIterator) MustCursor() datastore.Cursor {
	c, err := iter.iter.Cursor()
	xerrors.MustNil(err)
	return c
}

func (iter *AuthIterator) Next() (*datastore.Key, *Auth, error) {
	if iter.viaKeys {
		key, err := iter.iter.Next(nil)
		if err != nil {
			if err == iterator.Done {
				return nil, nil, nil
			}
			return nil, nil, err
		}
		_, ent, err := iter.client.Get(iter.ctx, key)
		if err != nil {
			return nil, nil, err
		}
		return key, ent, nil
	}
	var ent Auth
	key, err := iter.iter.Next(&ent)
	if err != nil {
		if err == iterator.Done {
			return nil, nil, nil
		}
		return nil, nil, err
	}
	return key, &ent, nil
}

func (iter *AuthIterator) MustNext() (*datastore.Key, *Auth) {
	key, ent, err := iter.Next()
	xerrors.MustNil(err)
	return key, ent
}
